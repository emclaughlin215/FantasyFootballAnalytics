{"version":3,"sources":["constants.ts","actions/GlobalActions.tsx","utils/LoadState.ts","utils/PlayerAnalysis.tsx","utils/TypeScript.tsx","utils/Tables.tsx","components/PerformanceAnalysis.tsx","components/News.tsx","components/PlayerGraphs.tsx","components/PlayerAnalysis.tsx","App.tsx","reducers/GlobalReducers.ts","reducers/PlayerReducers.ts","reducers/Reducers.ts","serviceWorker.ts","index.tsx"],"names":["constants","getPlayerLatestList","query","dispatch","a","fetch","res","json","resJson","type","payload","getPlayerList","getPlayerTypeList","getTeamList","setFilteredPlayerList","filteredPlayersLatest","filteredPlayers","loaded","value","renderPlayerTypeInputValue","player","singular_name","renderPlayerInputValue","first_name","second_name","renderTeamInputValue","team","name","renderPlayerType","handleClick","modifiers","matchesPredicate","text","plural_name","active","disabled","key","id","onClick","highlightText","renderPlayer","renderTeam","escapeRegExpChars","replace","lastIndex","words","split","filter","word","length","map","regexp","RegExp","join","tokens","match","exec","before","slice","push","rest","filterPlayerType","playerType","_index","exactMatch","normalizedName","toLowerCase","normalizedQuery","indexOf","filterPlayer","filterTeam","prop","obj","instanceOf","object","AbstractSortableColumn","stat","getCellData","sortColumn","cellRenderer","rowIndex","columnHeaderCellRenderer","menuRenderer","renderMenu","this","StringSortableColumn","icon","b","compare","toString","localeCompare","NumberSortableColumn","PerformanceAnalysis","props","getLoadingOptions","playerState","playerListLatest","TableLoadingOption","CELLS","comparator","players","state","filteredPlayerList","sortedIndex","Utils","times","i","sort","setState","sortedPlayerIndex","sortedRowIndex","s","reduce","columns","filterPlayers","selectedPlayerType","selectedTeam","undefined","element_type","globalState","teamList","playerTypeList","PlayerTypeSuggest","Suggest","ofType","TeamSuggest","columnsList","col","getColumn","className","iconSize","itemPredicate","inputValueRenderer","onItemSelect","filterPlayersByType","items","itemRenderer","noResults","filterPlayersByTeam","numRows","enableColumnReordering","numFrozenColumns","loadingOptions","React","PureComponent","connect","GlobalReducer","PlayerReducer","News","news","news_added","date_added","moment","trim","format","NewsItem","PlayerAnalysis","tabIdToComponentMap","handleNavbarTabChange","navbarTabId","playerList","playerSelected","filterToPlayerLatest","code","filterToPlayer","selectedPlayer","PlayerSuggest","handleSelectPlayer","interactive","elevation","Elevation","THREE","animate","renderActiveTabPanelOnly","large","onChange","selectedTabId","vertical","title","Expander","PlayerState","bindActionCreators","App","displayActiveTab","tabId","activePanelOnly","Group","Heading","align","Alignment","RIGHT","defaultState","combineReducers","action","filteredPlayer","Boolean","window","location","hostname","store","createStore","Reducers","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03b3a48c.chunk.js","sourcesContent":["export const constants = {\r\n  loadPlayersAll: \"LOAD PLAYERS\",\r\n  loadPlayersLatest: \"LOAD PLAYERS LATEST\",\r\n  loadTeams: \"LOAD TEAMS\",\r\n  loadPlayerTypes: \"LOAD PLAYER TYPES\",\r\n  filterPlayers: \"FILTER PLAYERS\",\r\n}","import { constants } from '../constants';\r\nimport { IGlobalAction } from '../reducers/GlobalReducers';\r\nimport { IPlayerAction } from '../reducers/PlayerReducers';\r\nimport { IPlayer, IPlayerType, ITeam } from './../index.d';\r\n\r\nexport const getPlayerLatestList = (\r\n  query: string,\r\n) => {\r\n  return async (dispatch: Function) => {\r\n    const res: Response = await fetch(query);\r\n    const resJson: IPlayer[] = await res.json();\r\n    dispatch(getPlayerLatest(resJson));\r\n  };\r\n};\r\n\r\nfunction getPlayerLatest(players: IPlayer[]): IPlayerAction {\r\n  return {\r\n    type: constants.loadPlayersLatest,\r\n    payload: { \"playersLatest\": players },\r\n  }\r\n}\r\n\r\nexport const getPlayerList = (\r\n  query: string,\r\n) => {\r\n  return async (dispatch: Function) => {\r\n    const res: Response = await fetch(query);\r\n    const resJson: IPlayer[] = await res.json();\r\n    dispatch(getPlayer(resJson));\r\n  };\r\n};\r\n\r\nfunction getPlayer(players: IPlayer[]): IPlayerAction {\r\n  return {\r\n    type: constants.loadPlayersAll,\r\n    payload: { \"players\": players },\r\n  }\r\n}\r\n\r\nexport const getPlayerTypeList = (\r\n  query: string,\r\n) => {\r\n  return async (dispatch: Function) => {\r\n    const res: Response = await fetch(query);\r\n    const resJson: IPlayerType[] = await res.json();\r\n    dispatch(getPlayerType(resJson));\r\n  };\r\n};\r\n\r\nfunction getPlayerType(playerTypes: IPlayerType[]): IGlobalAction {\r\n  return {\r\n    type: constants.loadPlayerTypes,\r\n    payload: playerTypes,\r\n  }\r\n}\r\n\r\nexport const getTeamList = (\r\n  query: string,\r\n) => {\r\n  return async (dispatch: Function) => {\r\n    const res: Response = await fetch(query);\r\n    const resJson: ITeam[] = await res.json();\r\n    dispatch(getTeam(resJson));\r\n  };\r\n};\r\n\r\nfunction getTeam(teams: ITeam[]): IGlobalAction {\r\n  return {\r\n    type: constants.loadTeams,\r\n    payload: teams,\r\n  }\r\n}\r\n\r\nexport const setFilteredPlayerList = (filteredPlayersLatest: IPlayer[], filteredPlayers: IPlayer[]): IPlayerAction => {\r\n  return {\r\n    type: constants.filterPlayers,\r\n    payload: {\r\n      \"playersLatest\": filteredPlayersLatest,\r\n      \"players\": filteredPlayers,\r\n    }\r\n  }\r\n}\r\n","export interface LoadingLoadState {\r\n  type: \"loading\";\r\n}\r\n\r\nexport interface LoadedLoadState<T> {\r\n  type: \"loaded\";\r\n  value: T;\r\n}\r\n\r\nexport type LoadState<T> = LoadingLoadState | LoadedLoadState<T>;\r\n\r\nexport function loading(): LoadingLoadState {\r\n  return { type: \"loading\"}\r\n}\r\n\r\nexport function loaded<T>(value: T): LoadedLoadState<T> {\r\n  return { type: \"loaded\", value}\r\n}","import { MenuItem } from '@blueprintjs/core';\r\nimport { ItemPredicate, ItemRenderer } from '@blueprintjs/select';\r\nimport React from 'react';\r\n\r\nimport { IPlayer, IPlayerType, ITeam } from '../index.d';\r\n\r\nexport const renderPlayerTypeInputValue = (player: IPlayerType) => player.singular_name;\r\nexport const renderPlayerInputValue = (player: IPlayer) => player.first_name + ' ' + player.second_name;\r\nexport const renderTeamInputValue = (team: ITeam) => team.name;\r\n\r\nexport const renderPlayerType: ItemRenderer<IPlayerType> = (team, { handleClick, modifiers, query}) => {\r\n  if (!modifiers.matchesPredicate) {\r\n      return null;\r\n  }\r\n  const text = `${team.plural_name}`;\r\n  return (\r\n      <MenuItem\r\n        active={modifiers.active}\r\n        disabled={modifiers.disabled}\r\n        key={team.id}\r\n        onClick={handleClick}\r\n        text={highlightText(text, query)}\r\n    />\r\n  );\r\n};\r\n\r\nexport const renderPlayer: ItemRenderer<IPlayer> = (player, { handleClick, modifiers, query }) => {\r\n  if (!modifiers.matchesPredicate) {\r\n      return null;\r\n  }\r\n  const text = `${player.first_name} ${player.second_name}`;\r\n  return (\r\n      <MenuItem \r\n        active={modifiers.active}\r\n        disabled={modifiers.disabled}\r\n        key={player.id}\r\n        onClick={handleClick}\r\n        text={highlightText(text, query)}\r\n    />\r\n  );\r\n};\r\n\r\nexport const renderTeam: ItemRenderer<ITeam> = (team, { handleClick, modifiers, query}) => {\r\n  if (!modifiers.matchesPredicate) {\r\n      return null;\r\n  }\r\n  const text = `${team.name}`;\r\n  return (\r\n      <MenuItem\r\n        active={modifiers.active}\r\n        disabled={modifiers.disabled}\r\n        key={team.id}\r\n        onClick={handleClick}\r\n        text={highlightText(text, query)}\r\n    />\r\n  );\r\n};\r\n\r\n\r\nfunction escapeRegExpChars(text: string) {\r\n  return text.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\r\n}\r\n\r\nfunction highlightText(text: string, query: string) {\r\n  let lastIndex = 0;\r\n  const words = query\r\n      .split(/\\s+/)\r\n      .filter(word => word.length > 0)\r\n      .map(escapeRegExpChars);\r\n  if (words.length === 0) {\r\n      return [text];\r\n  }\r\n  const regexp = new RegExp(words.join(\"|\"), \"gi\");\r\n  const tokens: React.ReactNode[] = [];\r\n  while (true) {\r\n      const match = regexp.exec(text);\r\n      if (!match) {\r\n          break;\r\n      }\r\n      const length = match[0].length;\r\n      const before = text.slice(lastIndex, regexp.lastIndex - length);\r\n      if (before.length > 0) {\r\n          tokens.push(before);\r\n      }\r\n      lastIndex = regexp.lastIndex;\r\n      tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\r\n  }\r\n  const rest = text.slice(lastIndex);\r\n  if (rest.length > 0) {\r\n      tokens.push(rest);\r\n  }\r\n  return tokens;\r\n}\r\n\r\nexport const filterPlayerType: ItemPredicate<IPlayerType> = (query, playerType, _index, exactMatch) => {\r\n  const normalizedName = playerType.plural_name.toLowerCase() + ' ' + playerType.plural_name.toLowerCase();\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n      return normalizedName === normalizedQuery;\r\n  } else {\r\n      return `${normalizedName}`.indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\n\r\nexport const filterPlayer: ItemPredicate<IPlayer> = (query, player, _index, exactMatch) => {\r\n  const normalizedName = player.first_name.toLowerCase() + ' ' + player.second_name.toLowerCase();\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n      return normalizedName === normalizedQuery;\r\n  } else {\r\n      return `${normalizedName}`.indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\n\r\nexport const filterTeam: ItemPredicate<ITeam> = (query, team, _index, exactMatch) => {\r\n  const normalizedName = team.name.toLowerCase();\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n      return normalizedName === normalizedQuery;\r\n  } else {\r\n      return `${normalizedName}`.indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\n","export function prop<T, K extends keyof T>(obj: T, key: K) {\r\n  return obj[key];\r\n}\r\n\r\nexport function instanceOf<T>(object: any): object is T {\r\n  return 'member' in object;\r\n}","import { Menu, MenuItem } from '@blueprintjs/core';\r\nimport { Cell, Column, ColumnHeaderCell } from '@blueprintjs/table';\r\nimport React from 'react';\r\n\r\nimport { IPlayer } from './../index.d';\r\nimport { prop } from './TypeScript';\r\n\r\nexport type ICellLookup = (rowIndex: number, stat: (keyof IPlayer)[]) => any;\r\nexport type ISortCallback = (comparator: (a: IPlayer, b: IPlayer) => number) => void;\r\n\r\nexport interface ISortableColumn<T> {\r\n    getColumn(getCellData: ICellLookup, sortColumn: ISortCallback): JSX.Element;\r\n}\r\n\r\nabstract class AbstractSortableColumn implements ISortableColumn<IPlayer> {\r\n  constructor(protected name: string, protected stat: (keyof IPlayer)[]) {}\r\n\r\n  public getColumn(getCellData: ICellLookup, sortColumn: ISortCallback) {\r\n    const cellRenderer = (rowIndex: number) => (\r\n        <Cell>{getCellData(rowIndex, this.stat)}</Cell>\r\n      );\r\n      const columnHeaderCellRenderer = () => <ColumnHeaderCell name={this.name} menuRenderer={() => this.renderMenu(sortColumn)} />;\r\n      return (\r\n          <Column\r\n              cellRenderer={cellRenderer}\r\n              columnHeaderCellRenderer={columnHeaderCellRenderer}\r\n              name={this.name}\r\n          />\r\n      );\r\n  }\r\n\r\n  protected abstract renderMenu(sortColumn: ISortCallback): JSX.Element;\r\n}\r\n\r\nexport class StringSortableColumn extends AbstractSortableColumn {\r\n  protected renderMenu(sortColumn: ISortCallback) {\r\n      const sortAsc = () => sortColumn((a, b) => this.compare(a, b));\r\n      const sortDesc = () => sortColumn((a, b) => this.compare(b, a));\r\n      return ( \r\n          <Menu>\r\n              <MenuItem icon=\"sort-asc\" onClick={sortAsc} text=\"Sort Asc\" />\r\n              <MenuItem icon=\"sort-desc\" onClick={sortDesc} text=\"Sort Desc\" />\r\n          </Menu>\r\n      );\r\n  }\r\n\r\n  private compare(a: IPlayer, b: IPlayer) {\r\n    if (typeof this.stat[0] !== 'string') {\r\n      return 0;\r\n    }\r\n    return prop(a, this.stat[0]).toString().localeCompare(prop(b, this.stat[0]).toString());\r\n  }\r\n}\r\n\r\nexport class NumberSortableColumn extends AbstractSortableColumn {\r\n    protected renderMenu(sortColumn: ISortCallback) {\r\n        const sortAsc = () => sortColumn((a, b) => this.compare(a, b));\r\n        const sortDesc = () => sortColumn((a, b) => this.compare(b, a));\r\n        return (\r\n            <Menu>\r\n                <MenuItem icon=\"sort-asc\" onClick={sortAsc} text=\"Sort Asc\" />\r\n                <MenuItem icon=\"sort-desc\" onClick={sortDesc} text=\"Sort Desc\" />\r\n            </Menu>\r\n        ); \r\n    }\r\n\r\n  private compare(a: IPlayer, b: IPlayer) {\r\n    if ((typeof this.stat[0] !== 'number') || (typeof this.stat[0] !== 'bigint')) {\r\n      return 0;\r\n    }\r\n      return prop(a, this.stat[0]) - prop(b, this.stat[0]);\r\n    }\r\n}","import './PerformanceAnalysis.scss';\r\n\r\nimport { H3, Icon, MenuItem } from '@blueprintjs/core';\r\nimport { Suggest } from '@blueprintjs/select';\r\nimport { Table, TableLoadingOption, Utils } from '@blueprintjs/table';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IPlayer, IPlayerType, ITeam } from '../index.d';\r\nimport { IGlobalReducer } from '../reducers/GlobalReducers';\r\nimport { IPlayerReducer } from '../reducers/PlayerReducers';\r\nimport { ICombinedReducers } from '../reducers/Reducers';\r\nimport { loaded, loading, LoadState } from '../utils/LoadState';\r\nimport {\r\n  filterPlayerType,\r\n  filterTeam,\r\n  renderPlayerType,\r\n  renderPlayerTypeInputValue,\r\n  renderTeam,\r\n  renderTeamInputValue,\r\n} from '../utils/PlayerAnalysis';\r\nimport { ISortableColumn, NumberSortableColumn, StringSortableColumn } from '../utils/Tables';\r\nimport { prop } from '../utils/TypeScript';\r\n\r\nexport interface IPerformanceAnalysisProps { \r\n  globalState: IGlobalReducer,\r\n  playerState: IPlayerReducer,\r\n}\r\nexport interface IPerformanceAnalysisState { \r\n  filteredPlayerList: LoadState<IPlayer[]>\r\n  sortedPlayerIndex: number[]\r\n  selectedTeam?: ITeam\r\n  selectedPlayerType?: IPlayerType\r\n  columns: ISortableColumn<IPlayer>[]\r\n }\r\n\r\nexport class PerformanceAnalysis extends React.PureComponent<IPerformanceAnalysisProps, IPerformanceAnalysisState> {\r\n  constructor(props: IPerformanceAnalysisProps) {\r\n    super(props)\r\n    this.state = { \r\n      filteredPlayerList: loading(),\r\n      sortedPlayerIndex: [],\r\n      columns: [\r\n        new StringSortableColumn('Player',[\"first_name\", \"second_name\"]),\r\n        new NumberSortableColumn('Price', [\"now_cost\"]),\r\n        new NumberSortableColumn('Points', [\"total_points\"]),\r\n        new NumberSortableColumn('Form', [\"form\"]),\r\n        new NumberSortableColumn('Goals Scored', [\"goals_scored\"]),\r\n        new NumberSortableColumn('Assists', [\"assists\"]),\r\n        new NumberSortableColumn('Clean Sheets', [\"clean_sheets\"]),\r\n        new NumberSortableColumn('Bonus Points', [\"bonus\"]),\r\n        new NumberSortableColumn('Form / Cost', [\"form_to_cost\"]),\r\n        new NumberSortableColumn('Bonus / Cost', [\"bonus_to_cost\"]),\r\n      ] as ISortableColumn<IPlayer>[]\r\n    }\r\n  }\r\n\r\n  filterPlayersByTeam(team: ITeam) {\r\n    this.filterPlayers(team, this.state.selectedPlayerType);\r\n    this.setState({ selectedTeam: team });\r\n  }\r\n\r\n  filterPlayersByType(playerType: IPlayerType) {\r\n    this.filterPlayers(this.state.selectedTeam, playerType);\r\n    this.setState({ selectedPlayerType: playerType });\r\n  }\r\n\r\n  filterPlayers(team?: ITeam, playerType?: IPlayerType) {\r\n    this.setState({ filteredPlayerList: loading() });\r\n    const { playerListLatest } = this.props.playerState;\r\n    let filteredPlayers: IPlayer[] = playerListLatest.type === 'loaded' ? playerListLatest.value : [];\r\n    filteredPlayers = playerType !== undefined\r\n      ? filteredPlayers.filter((player: IPlayer) => player.element_type === playerType.id)\r\n      : filteredPlayers;\r\n    filteredPlayers = team !== undefined\r\n      ? filteredPlayers.filter((player: IPlayer) => player.team === team.id)\r\n      : filteredPlayers;\r\n    this.setState({ filteredPlayerList: loaded(filteredPlayers) })\r\n  }\r\n\r\n  getLoadingOptions = (): TableLoadingOption[] => {\r\n    if (this.props.playerState.playerListLatest.type === \"loading\") {\r\n      return [TableLoadingOption.CELLS];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  sortColumn = (comparator: (a: any, b: any) => number) => {\r\n    const players = this.state.filteredPlayerList;\r\n    if (players.type !== \"loaded\") {\r\n      return;\r\n    }\r\n    const sortedIndex = Utils.times(players.value.length, (i: number) => i);\r\n    sortedIndex.sort((a: number, b: number) => {\r\n      return comparator(players.value[a], players.value[b]);\r\n    });\r\n    this.setState({ sortedPlayerIndex: sortedIndex });\r\n  }\r\n\r\n  private getCellData = (rowIndex: number, stat: (keyof IPlayer)[]) => {\r\n    const { filteredPlayerList, sortedPlayerIndex} = this.state;\r\n    if (filteredPlayerList.type !== \"loaded\") {\r\n      return undefined;\r\n    }\r\n    const sortedRowIndex = sortedPlayerIndex[rowIndex];\r\n    if (sortedRowIndex != null) {\r\n        rowIndex = sortedRowIndex;\r\n    }\r\n    return stat.map(s => { return prop(filteredPlayerList.value[rowIndex], s) })\r\n        .reduce((a, b) => [a, b].join(\" \"));\r\n  };\r\n  \r\n  render() {\r\n    const { playerListLatest } = this.props.playerState;\r\n    const { teamList, playerTypeList } = this.props.globalState;\r\n    const { columns } = this.state;\r\n    const PlayerTypeSuggest = Suggest.ofType<IPlayerType>();\r\n    const TeamSuggest = Suggest.ofType<ITeam>();\r\n    const columnsList = playerListLatest.type === \"loading\"\r\n      ? []\r\n      : columns.map(col => col.getColumn(this.getCellData, this.sortColumn));\r\n    return (\r\n      <div className='body-container'> \r\n        <div className='tab-title'>\r\n          <Icon icon={'predictive-analysis'} iconSize={20} />\r\n          <H3 className='bp3-heading'>Performance Analysis</H3>\r\n        </div> \r\n        <div>\r\n          <div className='dropdown-container'>\r\n            <PlayerTypeSuggest\r\n              className={playerTypeList.type === 'loading' ? 'bp3-skeleton' : 'dropdown'}\r\n              itemPredicate={filterPlayerType}\r\n              inputValueRenderer={renderPlayerTypeInputValue}\r\n              onItemSelect={(playerType: IPlayerType) => { this.filterPlayersByType(playerType) }}\r\n              items={playerTypeList.type === 'loaded' ? playerTypeList.value : []}\r\n              itemRenderer={renderPlayerType}\r\n              noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n            />\r\n            <TeamSuggest\r\n              className={teamList.type === 'loading' ? 'bp3-skeleton' : 'dropdown'}\r\n              itemPredicate={filterTeam}\r\n              inputValueRenderer={renderTeamInputValue}\r\n              onItemSelect={(team: ITeam) => { this.filterPlayersByTeam(team) }}\r\n              items={teamList.type === 'loaded' ? teamList.value : []}\r\n              itemRenderer={renderTeam}\r\n              noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Table\r\n              numRows={this.state.filteredPlayerList.type === \"loading\" ? 0 : this.state.filteredPlayerList.value.length > 20 ? 20 : this.state.filteredPlayerList.value.length}\r\n              enableColumnReordering={true}\r\n              numFrozenColumns={1}\r\n              loadingOptions={this.getLoadingOptions()}>\r\n              {columnsList}\r\n            </Table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ICombinedReducers) => {\r\n  return {\r\n    globalState: state.GlobalReducer,\r\n    playerState: state.PlayerReducer,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(PerformanceAnalysis)\r\n","import './News.scss';\r\n\r\nimport moment from 'moment';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IPlayerReducer } from '../reducers/PlayerReducers';\r\nimport { ICombinedReducers } from '../reducers/Reducers';\r\n\r\n\r\ninterface INewsProps {\r\n  playerState: IPlayerReducer,\r\n}\r\n\r\nexport class News extends React.PureComponent<INewsProps> {\r\n  constructor(props: INewsProps) {\r\n    super(props);\r\n  }\r\n\r\n  private NewsItem(first_name: string, second_name: string, news: string, news_added: string) {\r\n    const date_added = moment(news_added.trim(), \"YYYY-MM-DDTHH:mm:ss.ssssssZ\").format(\"Do MMM YYYY\");\r\n    return (\r\n      <div>\r\n        <h3> {first_name + \" \" + second_name} </h3>\r\n        <h4> {date_added + \" \" + news_added} </h4>\r\n        {news} \r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { filteredPlayerList } = this.props.playerState;\r\n    return (\r\n      <div className=\"news-container\">\r\n        {filteredPlayerList.type === 'loaded' ?\r\n          filteredPlayerList.value.map(player => {\r\n            return player.news && player.news_added ?\r\n              <div className='news-element'>\r\n                {this.NewsItem(player.first_name, player.second_name, player.news, player.news_added)}\r\n              </div> :\r\n              undefined\r\n          })\r\n          : \"No News\"\r\n        }\r\n      </div> \r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ICombinedReducers) => {\r\n  return {\r\n    playerState: state.PlayerReducer,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(News);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IPlayer } from '../index.d';\r\nimport { IGlobalReducer } from '../reducers/GlobalReducers';\r\nimport { ICombinedReducers } from '../reducers/Reducers';\r\nimport PlayerAnalysis from './PlayerAnalysis';\r\n\r\nexport interface PlayerGraphProps {\r\n  state: IGlobalReducer\r\n}\r\n\r\nexport interface PlayerGraphState {\r\n  player: IPlayer\r\n}\r\n\r\nexport class PlayerGraphs extends React.PureComponent<PlayerGraphProps, PlayerGraphState> {\r\n  constructor(props: PlayerGraphProps) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {'Hello'}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ICombinedReducers) => {\r\n  return {\r\n    state: state.GlobalReducer,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(PlayerAnalysis);\r\n","import './PlayerAnalysis.scss';\r\n\r\nimport { Card, Elevation, H3, Icon, MenuItem, Tab, TabId, Tabs } from '@blueprintjs/core';\r\nimport { Suggest } from '@blueprintjs/select';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { setFilteredPlayerList } from '../actions/GlobalActions';\r\nimport { IPlayer, IStringElementMap, ITeam } from '../index.d';\r\nimport { IGlobalReducer } from '../reducers/GlobalReducers';\r\nimport { IPlayerReducer } from '../reducers/PlayerReducers';\r\nimport { ICombinedReducers } from '../reducers/Reducers';\r\nimport {\r\n  filterPlayer,\r\n  filterTeam,\r\n  renderPlayer,\r\n  renderPlayerInputValue,\r\n  renderTeam,\r\n  renderTeamInputValue,\r\n} from '../utils/PlayerAnalysis';\r\nimport { instanceOf } from '../utils/TypeScript';\r\nimport News from './News';\r\nimport PlayerGraphs from './PlayerGraphs';\r\n\r\nexport interface IPlayerAnalysisProps {\r\n  globalState: IGlobalReducer,\r\n  playerState: IPlayerReducer,\r\n  setFilteredPlayerList: typeof setFilteredPlayerList,\r\n}\r\n \r\nexport interface IPlayerAnalysisState { \r\n  navbarTabId: TabId;\r\n  selectedPlayer?: IPlayer;\r\n }\r\n\r\nexport class PlayerAnalysis extends React.PureComponent<IPlayerAnalysisProps, IPlayerAnalysisState> {\r\n  constructor(props: IPlayerAnalysisProps) {\r\n    super(props)\r\n    this.state = {\r\n      navbarTabId: 'playerGraphs',\r\n    }\r\n  }\r\n \r\n  private filterPlayers(team: ITeam) {\r\n    let filteredPlayersLatest: IPlayer[] = this.props.playerState.playerListLatest.type === 'loaded' ? this.props.playerState.playerListLatest.value : [];\r\n    filteredPlayersLatest = filteredPlayersLatest.filter((player: IPlayer) => player.team === team.id);\r\n    let filteredPlayers: IPlayer[] = this.props.playerState.playerList.type === 'loaded' ? this.props.playerState.playerList.value : [];\r\n    filteredPlayers = filteredPlayers.filter((player: IPlayer) => player.team === team.id);\r\n    this.props.setFilteredPlayerList(filteredPlayersLatest, filteredPlayers);\r\n  }\r\n\r\n  private handleSelectPlayer(playerSelected: IPlayer) {\r\n    let filterToPlayerLatest: IPlayer[] = this.props.playerState.filteredPlayerList.type === 'loaded' ? this.props.playerState.filteredPlayerList.value : [];\r\n    filterToPlayerLatest.filter((player: IPlayer) => player.code === playerSelected.code);\r\n    let filterToPlayer: IPlayer[] = this.props.playerState.filteredPlayerList.type === 'loaded' ? this.props.playerState.filteredPlayerList.value : [];\r\n    filterToPlayer.filter((player: IPlayer) => player.code === playerSelected.code);\r\n    this.props.setFilteredPlayerList(filterToPlayerLatest, filterToPlayer);\r\n  }\r\n\r\n  private tabIdToComponentMap: IStringElementMap = {\r\n    \"playerNews\": <News />,\r\n    \"playerGraphs\": <PlayerGraphs />\r\n  }\r\n      \r\n  private handleNavbarTabChange = (navbarTabId: TabId) => this.setState({ navbarTabId });\r\n\r\n  render() {\r\n    const { teamList } = this.props.globalState;\r\n    const { playerListLatest } = this.props.playerState;    \r\n    const { selectedPlayer } = this.state;\r\n    const PlayerSuggest = Suggest.ofType<IPlayer>();\r\n    const TeamSuggest = Suggest.ofType<ITeam>();\r\n    const stats: (keyof IPlayer | string)[][] =\r\n      [['Goals Scored (Assists)', 'goals_scored', 'assists'],\r\n        ['Creativity (Rank)', 'creativity', 'creativity_rank'],\r\n        ['Influence (Rank)', 'influence', 'influence_rank'],\r\n        ['Threat (Rank)', 'threat', 'threat_rank'],\r\n        ['Chance of Playing (next)', 'chance_of_playing_this_round', 'chance_of_playing_next_round']]\r\n    return (\r\n      <div className='body-container'>\r\n        <div className='tab-title'>\r\n          <Icon icon={'person'} iconSize={20} />\r\n          <H3 className='bp3-heading'>Player Analysis</H3>\r\n        </div>\r\n        <div>\r\n          <div className='dropdown-container'>\r\n            <TeamSuggest\r\n              className={teamList.type === 'loading' ? 'bp3-skeleton' : 'dropdown'}\r\n              itemPredicate={filterTeam}\r\n              inputValueRenderer={renderTeamInputValue}\r\n              onItemSelect={(team: ITeam) => { this.filterPlayers(team)}}\r\n              items={teamList.type === 'loaded' ? teamList.value : []}\r\n              itemRenderer={renderTeam}\r\n              noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n            />\r\n            <PlayerSuggest\r\n              className={playerListLatest.type === 'loading' ? 'bp3-skeleton' : 'dropdown'}\r\n              itemPredicate={filterPlayer}\r\n              inputValueRenderer={renderPlayerInputValue}\r\n              onItemSelect={(player: IPlayer) => { this.handleSelectPlayer(player) }}\r\n              items={this.props.playerState.filteredPlayerList.type === 'loaded' ? this.props.playerState.filteredPlayerList.value : []}\r\n              itemRenderer={renderPlayer}\r\n              noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n            />\r\n            <div className='stats-container'>\r\n              {selectedPlayer &&\r\n                stats.map((stat) => {\r\n                return instanceOf<IPlayer>(selectedPlayer) && instanceOf<keyof IPlayer>(stat[1]) && instanceOf<keyof IPlayer>(stat[2]) && ((selectedPlayer[stat[1]] !== null) || (selectedPlayer[stat[2]] !== null)) &&\r\n                  <Card className='stats-card' interactive={false} elevation={Elevation.THREE}>\r\n                    <h3>{stat[0]}</h3>\r\n                    <p>{selectedPlayer[stat[1]] + ' (' + selectedPlayer[stat[2]] + ')'}</p>\r\n                  </Card>\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div className='player-analysis-tabs'>\r\n            <Tabs\r\n              animate={true}\r\n              renderActiveTabPanelOnly={true}\r\n              id=\"MainTabs\"\r\n              large={true}\r\n              onChange={this.handleNavbarTabChange}\r\n              selectedTabId={this.state.navbarTabId}\r\n              vertical={true}>\r\n              <Tab id=\"playerNews\" title=\"News\" />\r\n              <Tab id=\"playerGraphs\" title=\"Analysis\" />\r\n              <Tabs.Expander />\r\n            </Tabs>\r\n            <div>\r\n              {this.tabIdToComponentMap[this.state.navbarTabId.toString()]}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ICombinedReducers) => {\r\n  return {\r\n    globalState: state.GlobalReducer,\r\n    playerState: state.PlayerState,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return bindActionCreators(\r\n    {\r\n      setFilteredPlayerList,\r\n    },\r\n    dispatch,\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerAnalysis);","import './App.scss';\n\nimport { Alignment, Navbar, Tab, TabId, Tabs } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { getPlayerLatestList, getPlayerList, getPlayerTypeList, getTeamList } from './actions/GlobalActions';\nimport PerformanceAnalysis from './components/PerformanceAnalysis';\nimport PlayerAnalysis from './components/PlayerAnalysis';\nimport { IStringElementMap } from './index.d';\nimport { IGlobalReducer } from './reducers/GlobalReducers';\n\nexport interface IAppState {\n  activePanelOnly: boolean;\n  animate: boolean;\n  navbarTabId: TabId;\n  vertical: boolean;\n}\n\nexport interface IAppProps {\n  getPlayerLatestList: typeof getPlayerLatestList,\n  getPlayerTypeList: typeof getPlayerTypeList,\n  getTeamList: typeof getTeamList,\n  getPlayerList: typeof getPlayerList,\n }\n\nexport class App extends React.PureComponent<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props) \n    this.state = {\n      activePanelOnly: true,\n      animate: true,\n      navbarTabId: \"playerAnalysis\",\n      vertical: false,\n    };\n  }\n\n  componentWillMount() {\n    const { getPlayerLatestList, getPlayerList, getPlayerTypeList, getTeamList} = this.props;\n    getPlayerLatestList(\"http://localhost:8000/players/latest/all\");\n    getPlayerList(\"http://localhost:8000/players/all\");\n    getPlayerTypeList(\"http://localhost:8000/players/types\");\n    getTeamList(\"http://localhost:8000/teams/all\");\n  }\n \n  private tabIdToComponentMap: IStringElementMap = {\n    \"playerAnalysis\": <PlayerAnalysis />,\n    \"PerformanceAnalysis\": <PerformanceAnalysis />\n  }\n\n  private handleNavbarTabChange = (navbarTabId: TabId) => this.setState({ navbarTabId });\n\n  private displayActiveTab = (tabId: string) => this.tabIdToComponentMap[tabId];\n\n  public render() {\n    return (\n      <div className=\"bp3-dark\">\n        <Navbar>\n          <Navbar.Group>\n              <Navbar.Heading className='app-header'>\n                  Fantasy Premier League Analytics\n              </Navbar.Heading>\n          </Navbar.Group>\n          <Navbar.Group align={Alignment.RIGHT}>\n            <Tabs\n              animate={this.state.animate}\n              renderActiveTabPanelOnly={this.state.activePanelOnly}\n              id=\"MainTabs\"\n              large={true}\n              onChange={this.handleNavbarTabChange}\n              selectedTabId={this.state.navbarTabId}\n              vertical={false}>\n              <Tab id=\"playerAnalysis\" title=\"Player Analysis\"/>\n              <Tab id=\"PerformanceAnalysis\" title=\"Performance Analysis\" />\n              <Tabs.Expander />\n            </Tabs>\n          </Navbar.Group>\n        </Navbar>\n        <div className='main-container'>\n          {this.displayActiveTab(this.state.navbarTabId.toString())}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (globalState: IGlobalReducer) => {\n  return {\n    state: globalState,\n  };\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return bindActionCreators(\n    {\n      getPlayerLatestList,\n      getPlayerTypeList,\n      getPlayerList,\n      getTeamList,\n    },\n    dispatch,\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { constants } from '../constants';\r\nimport { IPlayerType, ITeam } from '../index.d';\r\nimport { loaded, loading, LoadState } from '../utils/LoadState';\r\n\r\nexport interface IGlobalReducer {\r\n  teamList: LoadState<ITeam[]>,\r\n  playerTypeList: LoadState<IPlayerType[]>,\r\n}\r\n\r\nexport interface ITeamAction {\r\n  type: string,\r\n  payload: ITeam[],\r\n}\r\n\r\nexport interface IPlayerTypeAction {\r\n  type: string,\r\n  payload: IPlayerType[],\r\n}\r\n\r\nexport type IGlobalAction = ITeamAction | IPlayerTypeAction;\r\n\r\nconst defaultState: IGlobalReducer = {\r\n  playerTypeList: loading(),\r\n  teamList: loading(),\r\n}\r\n\r\nexport const GlobalReducer = (state = defaultState, action: IGlobalAction) => {\r\n\r\n  switch (action.type) {\r\n    case constants.loadPlayerTypes:\r\n      return {\r\n        ...state,\r\n        playerTypeList: loaded(action.payload),\r\n      }\r\n    case constants.loadTeams:\r\n      return {\r\n        ...state,\r\n        teamList: loaded(action.payload),\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { constants } from '../constants';\r\nimport { IPlayer } from '../index.d';\r\nimport { loaded, loading, LoadState } from '../utils/LoadState';\r\n\r\nexport interface IPlayerReducer {\r\n  playerListLatest: LoadState<IPlayer[]>,\r\n  playerList: LoadState<IPlayer[]>,\r\n  filteredPlayerList: LoadState<IPlayer[]>,\r\n}\r\n\r\nexport interface IPlayerAction {\r\n  type: string,\r\n  payload: {\r\n    playersLatest?: IPlayer[],\r\n    players?: IPlayer[],\r\n  },\r\n}\r\n\r\nconst defaultState: IPlayerReducer = {\r\n  playerListLatest: loading(),\r\n  playerList: loading(),\r\n  filteredPlayerList: loading(),\r\n}\r\n\r\nexport const PlayerReducer = (state = defaultState, action: IPlayerAction) => {\r\n\r\n  switch (action.type) {\r\n    case constants.loadPlayersLatest: {\r\n      return {\r\n        ...state,\r\n        playerListLatest: loaded(action.payload[\"playersLatest\"]),\r\n      }\r\n    }\r\n    case constants.loadPlayersAll: {\r\n      return {\r\n        ...state,\r\n        playerList: loaded(action.payload[\"players\"]),\r\n      }\r\n    }\r\n    case constants.filterPlayers:\r\n      return {\r\n        ...state,\r\n        filteredPlayerList: loaded(action.payload[\"playersLatest\"]),\r\n        filteredPlayer: loaded(action.payload[\"players\"]),\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport { GlobalReducer, IGlobalReducer } from './GlobalReducers';\r\nimport { IPlayerReducer, PlayerReducer } from './PlayerReducers';\r\n\r\nexport interface ICombinedReducers {\r\n  PlayerState: any;\r\n  GlobalReducer: IGlobalReducer;\r\n  PlayerReducer: IPlayerReducer;\r\n}\r\n\r\nexport default combineReducers({\r\n  GlobalReducer,\r\n  PlayerReducer,\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './App';\nimport Reducers from './reducers/Reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(Reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}