{"version":3,"sources":["constants.ts","actions/GlobalActions.tsx","utils/LoadState.ts","utils/PlayerAnalysis.tsx","utils/Tables.tsx","components/PerformanceAnalysis.tsx","components/PlayerAnalysis.tsx","App.tsx","reducers/GlobalReducers.tsx","reducers/Reducers.tsx","serviceWorker.ts","index.tsx"],"names":["constants","getPlayerList","query","dispatch","a","fetch","res","json","resJson","type","payload","getPlayerTypeList","getTeamList","loaded","value","renderPlayerTypeInputValue","player","singular_name","renderPlayerInputValue","first_name","second_name","renderTeamInputValue","team","name","renderPlayerType","handleClick","modifiers","matchesPredicate","text","plural_name","active","disabled","key","id","onClick","highlightText","renderPlayer","renderTeam","escapeRegExpChars","replace","lastIndex","words","split","filter","word","length","map","regexp","RegExp","join","tokens","match","exec","before","slice","push","rest","filterPlayerType","playerType","_index","exactMatch","normalizedName","toLowerCase","normalizedQuery","indexOf","filterPlayer","filterTeam","AbstractSortableColumn","stat","getCellData","sortColumn","cellRenderer","rowIndex","columnHeaderCellRenderer","menuRenderer","renderMenu","this","StringSortableColumn","icon","b","compare","toString","localeCompare","NumberSortableColumn","PerformanceAnalysis","props","getLoadingOptions","state","playerList","TableLoadingOption","CELLS","comparator","players","filteredPlayerList","sortedIndex","Utils","times","i","sort","setState","sortedPlayerIndex","sortedRowIndex","s","reduce","columns","filterPlayers","selectedPlayerType","selectedTeam","filteredPlayers","undefined","element_type","playerTypeList","teamList","PlayerTypeSuggest","Suggest","ofType","TeamSuggest","columnsList","col","getColumn","className","iconSize","itemPredicate","inputValueRenderer","onItemSelect","filterPlayersByType","items","itemRenderer","noResults","filterPlayersByTeam","numRows","enableColumnReordering","numFrozenColumns","loadingOptions","React","PureComponent","connect","globalState","PlayerAnalysis","selectedPlayer","PlayerSuggest","statsToShow","goals_scored","assists","creativity","creativity_rank","influence","influence_rank","threat","threat_rank","chance_of_playing_this_round","chance_of_playing_next_round","handleSelectPlayer","interactive","elevation","Elevation","THREE","App","tabIdToComponentMap","handleNavbarTabChange","navbarTabId","displayActiveTab","tabId","activePanelOnly","animate","vertical","Group","Heading","align","Alignment","RIGHT","renderActiveTabPanelOnly","large","onChange","selectedTabId","title","Expander","bindActionCreators","defaultState","combineReducers","GlobalReducer","action","Boolean","window","location","hostname","store","createStore","Reducers","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.abfac467.chunk.js","sourcesContent":["export const constants = {\r\n  loadPlayers: \"LOAD PLAYERS\",\r\n  loadTeams: \"LOAD TEAMS\",\r\n  loadPlayerTypes: \"LOAD PLAYER TYPES\",\r\n}","import { constants } from '../constants';\r\nimport { IGlobalAction } from '../reducers/GlobalReducers';\r\nimport { IPlayer, IPlayerType, ITeam } from './../index.d';\r\n\r\nexport const getPlayerList = (\r\n  query: string,\r\n) => {\r\n  return async (dispatch: Function) => {\r\n    const res: Response = await fetch(query);\r\n    const resJson: IPlayer[] = await res.json();\r\n    dispatch(getPlayer(resJson));\r\n  };\r\n};\r\n\r\nfunction getPlayer(players: IPlayer[]): IGlobalAction {\r\n  return {\r\n    type: constants.loadPlayers,\r\n    payload: players,\r\n  }\r\n}\r\n\r\nexport const getPlayerTypeList = (\r\n  query: string,\r\n) => {\r\n  return async (dispatch: Function) => {\r\n    const res: Response = await fetch(query);\r\n    const resJson: IPlayerType[] = await res.json();\r\n    dispatch(getPlayerType(resJson));\r\n  };\r\n};\r\n\r\nfunction getPlayerType(playerTypes: IPlayerType[]): IGlobalAction {\r\n  return {\r\n    type: constants.loadPlayerTypes,\r\n    payload: playerTypes,\r\n  }\r\n}\r\n\r\nexport const getTeamList = (\r\n  query: string,\r\n) => {\r\n  return async (dispatch: Function) => {\r\n    const res: Response = await fetch(query);\r\n    const resJson: ITeam[] = await res.json();\r\n    dispatch(getTeam(resJson));\r\n  };\r\n};\r\n\r\nfunction getTeam(teams: ITeam[]): IGlobalAction {\r\n  return {\r\n    type: constants.loadTeams,\r\n    payload: teams,\r\n  }\r\n}\r\n","export interface LoadingLoadState {\r\n  type: \"loading\";\r\n}\r\n\r\nexport interface LoadedLoadState<T> {\r\n  type: \"loaded\";\r\n  value: T;\r\n}\r\n\r\nexport type LoadState<T> = LoadingLoadState | LoadedLoadState<T>;\r\n\r\nexport function loading(): LoadingLoadState {\r\n  return { type: \"loading\"}\r\n}\r\n\r\nexport function loaded<T>(value: T): LoadedLoadState<T> {\r\n  return { type: \"loaded\", value}\r\n}","import { MenuItem } from '@blueprintjs/core';\r\nimport { ItemPredicate, ItemRenderer } from '@blueprintjs/select';\r\nimport React from 'react';\r\n\r\nimport { IPlayer, IPlayerType, ITeam } from '../index.d';\r\n\r\nexport const renderPlayerTypeInputValue = (player: IPlayerType) => player.singular_name;\r\nexport const renderPlayerInputValue = (player: IPlayer) => player.first_name + ' ' + player.second_name;\r\nexport const renderTeamInputValue = (team: ITeam) => team.name;\r\n\r\nexport const renderPlayerType: ItemRenderer<IPlayerType> = (team, { handleClick, modifiers, query}) => {\r\n  if (!modifiers.matchesPredicate) {\r\n      return null;\r\n  }\r\n  const text = `${team.plural_name}`;\r\n  return (\r\n      <MenuItem\r\n        active={modifiers.active}\r\n        disabled={modifiers.disabled}\r\n        key={team.id}\r\n        onClick={handleClick}\r\n        text={highlightText(text, query)}\r\n    />\r\n  );\r\n};\r\n\r\nexport const renderPlayer: ItemRenderer<IPlayer> = (player, { handleClick, modifiers, query }) => {\r\n  if (!modifiers.matchesPredicate) {\r\n      return null;\r\n  }\r\n  const text = `${player.first_name} ${player.second_name}`;\r\n  return (\r\n      <MenuItem \r\n        active={modifiers.active}\r\n        disabled={modifiers.disabled}\r\n        key={player.id}\r\n        onClick={handleClick}\r\n        text={highlightText(text, query)}\r\n    />\r\n  );\r\n};\r\n\r\nexport const renderTeam: ItemRenderer<ITeam> = (team, { handleClick, modifiers, query}) => {\r\n  if (!modifiers.matchesPredicate) {\r\n      return null;\r\n  }\r\n  const text = `${team.name}`;\r\n  return (\r\n      <MenuItem\r\n        active={modifiers.active}\r\n        disabled={modifiers.disabled}\r\n        key={team.id}\r\n        onClick={handleClick}\r\n        text={highlightText(text, query)}\r\n    />\r\n  );\r\n};\r\n\r\n\r\nfunction escapeRegExpChars(text: string) {\r\n  return text.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\r\n}\r\n\r\nfunction highlightText(text: string, query: string) {\r\n  let lastIndex = 0;\r\n  const words = query\r\n      .split(/\\s+/)\r\n      .filter(word => word.length > 0)\r\n      .map(escapeRegExpChars);\r\n  if (words.length === 0) {\r\n      return [text];\r\n  }\r\n  const regexp = new RegExp(words.join(\"|\"), \"gi\");\r\n  const tokens: React.ReactNode[] = [];\r\n  while (true) {\r\n      const match = regexp.exec(text);\r\n      if (!match) {\r\n          break;\r\n      }\r\n      const length = match[0].length;\r\n      const before = text.slice(lastIndex, regexp.lastIndex - length);\r\n      if (before.length > 0) {\r\n          tokens.push(before);\r\n      }\r\n      lastIndex = regexp.lastIndex;\r\n      tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\r\n  }\r\n  const rest = text.slice(lastIndex);\r\n  if (rest.length > 0) {\r\n      tokens.push(rest);\r\n  }\r\n  return tokens;\r\n}\r\n\r\nexport const filterPlayerType: ItemPredicate<IPlayerType> = (query, playerType, _index, exactMatch) => {\r\n  const normalizedName = playerType.plural_name.toLowerCase() + ' ' + playerType.plural_name.toLowerCase();\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n      return normalizedName === normalizedQuery;\r\n  } else {\r\n      return `${normalizedName}`.indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\n\r\nexport const filterPlayer: ItemPredicate<IPlayer> = (query, player, _index, exactMatch) => {\r\n  const normalizedName = player.first_name.toLowerCase() + ' ' + player.second_name.toLowerCase();\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n      return normalizedName === normalizedQuery;\r\n  } else {\r\n      return `${normalizedName}`.indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\n\r\nexport const filterTeam: ItemPredicate<ITeam> = (query, team, _index, exactMatch) => {\r\n  const normalizedName = team.name.toLowerCase();\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n      return normalizedName === normalizedQuery;\r\n  } else {\r\n      return `${normalizedName}`.indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\n","import { Menu, MenuItem } from '@blueprintjs/core';\r\nimport { Cell, Column, ColumnHeaderCell } from '@blueprintjs/table';\r\nimport React from 'react';\r\n\r\nimport { IPlayer } from '../index.d';\r\n\r\nexport type ICellLookup = (rowIndex: number, stat: (keyof IPlayer)[]) => any;\r\nexport type ISortCallback = (comparator: (a: any, b: any) => number) => void;\r\n\r\nexport interface ISortableColumn {\r\n    getColumn(getCellData: ICellLookup, sortColumn: ISortCallback): JSX.Element;\r\n}\r\n\r\nabstract class AbstractSortableColumn implements ISortableColumn {\r\n  constructor(protected name: string, protected stat: (keyof IPlayer)[]) {}\r\n\r\n  public getColumn(getCellData: ICellLookup, sortColumn: ISortCallback) {\r\n    const cellRenderer = (rowIndex: number) => (\r\n        <Cell>{getCellData(rowIndex, this.stat)}</Cell>\r\n      );\r\n      const columnHeaderCellRenderer = () => <ColumnHeaderCell name={this.name} menuRenderer={() => this.renderMenu(sortColumn)} />;\r\n      return (\r\n          <Column\r\n              cellRenderer={cellRenderer}\r\n              columnHeaderCellRenderer={columnHeaderCellRenderer}\r\n              name={this.name}\r\n          />\r\n      );\r\n  }\r\n\r\n  protected abstract renderMenu(sortColumn: ISortCallback): JSX.Element;\r\n}\r\n\r\nexport class StringSortableColumn extends AbstractSortableColumn {\r\n  protected renderMenu(sortColumn: ISortCallback) {\r\n      const sortAsc = () => sortColumn((a, b) => this.compare(a, b));\r\n      const sortDesc = () => sortColumn((a, b) => this.compare(b, a));\r\n      return (\r\n          <Menu>\r\n              <MenuItem icon=\"sort-asc\" onClick={sortAsc} text=\"Sort Asc\" />\r\n              <MenuItem icon=\"sort-desc\" onClick={sortDesc} text=\"Sort Desc\" />\r\n          </Menu>\r\n      );\r\n  }\r\n\r\n  private compare(a: string, b: string) {\r\n    return a.toString().localeCompare(b);\r\n  }\r\n}\r\n\r\nexport class NumberSortableColumn extends AbstractSortableColumn {\r\n    protected renderMenu(sortColumn: ISortCallback) {\r\n        const sortAsc = () => sortColumn((a, b) => this.compare(a, b));\r\n        const sortDesc = () => sortColumn((a, b) => this.compare(b, a));\r\n        return (\r\n            <Menu>\r\n                <MenuItem icon=\"sort-asc\" onClick={sortAsc} text=\"Sort Asc\" />\r\n                <MenuItem icon=\"sort-desc\" onClick={sortDesc} text=\"Sort Desc\" />\r\n            </Menu>\r\n        );\r\n    }\r\n\r\n    private compare(a: number, b: number) {\r\n      return b - a\r\n    }\r\n}","import './PerformanceAnalysis.scss';\r\n\r\nimport { H3, Icon, MenuItem } from '@blueprintjs/core';\r\nimport { Suggest } from '@blueprintjs/select';\r\nimport { Table, TableLoadingOption, Utils } from '@blueprintjs/table';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IPlayer, IPlayerType, ITeam } from '../index.d';\r\nimport { IGlobalReducer } from '../reducers/GlobalReducers';\r\nimport { loaded, loading, LoadState } from '../utils/LoadState';\r\nimport {\r\n  filterPlayerType,\r\n  filterTeam,\r\n  renderPlayerType,\r\n  renderPlayerTypeInputValue,\r\n  renderTeam,\r\n  renderTeamInputValue,\r\n} from '../utils/PlayerAnalysis';\r\nimport { ISortableColumn, NumberSortableColumn, StringSortableColumn } from '../utils/Tables';\r\nimport { prop } from '../utils/TypeScript';\r\n\r\nexport interface IPerformanceAnalysisProps { \r\n  state: IGlobalReducer\r\n}\r\nexport interface IPerformanceAnalysisState { \r\n  filteredPlayerList: LoadState<IPlayer[]>\r\n  sortedPlayerIndex: number[]\r\n  selectedTeam?: ITeam\r\n  selectedPlayerType?: IPlayerType\r\n  columns: ISortableColumn[]\r\n }\r\n\r\nexport class PerformanceAnalysis extends React.PureComponent<IPerformanceAnalysisProps, IPerformanceAnalysisState> {\r\n  constructor(props: IPerformanceAnalysisProps) {\r\n    super(props)\r\n    this.state = { \r\n      filteredPlayerList: loading(),\r\n      sortedPlayerIndex: [],\r\n      columns: [\r\n        new StringSortableColumn('Player',[\"first_name\", \"second_name\"]),\r\n        new NumberSortableColumn('Price', [\"now_cost\"]),\r\n        new NumberSortableColumn('Goals Scored', [\"goals_scored\"]),\r\n        new NumberSortableColumn('Assists', [\"assists\"]),\r\n        new NumberSortableColumn('Clean Sheets', [\"clean_sheets\"]),\r\n        new NumberSortableColumn('Bonus Points', [\"bonus\"]),\r\n        new NumberSortableColumn('Form / Cost', [\"form_to_cost\"]),\r\n        new NumberSortableColumn('Bonus / Cost', [\"bonus_to_cost\"]),\r\n      ] as ISortableColumn[]\r\n    }\r\n  }\r\n\r\n  filterPlayersByTeam(team: ITeam) {\r\n    this.filterPlayers(team, this.state.selectedPlayerType);\r\n    this.setState({ selectedTeam: team });\r\n  }\r\n\r\n  filterPlayersByType(playerType: IPlayerType) {\r\n    this.filterPlayers(this.state.selectedTeam, playerType);\r\n    this.setState({ selectedPlayerType: playerType });\r\n  }\r\n\r\n  filterPlayers(team?: ITeam, playerType?: IPlayerType) {\r\n    this.setState({ filteredPlayerList: loading() });\r\n    const { playerList } = this.props.state;\r\n    let filteredPlayers: IPlayer[] = playerList.type === 'loaded' ? playerList.value : [];\r\n    filteredPlayers = playerType !== undefined\r\n      ? filteredPlayers.filter((player: IPlayer) => player.element_type === playerType.id)\r\n      : filteredPlayers;\r\n    filteredPlayers = team !== undefined\r\n      ? filteredPlayers.filter((player: IPlayer) => player.team === team.id)\r\n      : filteredPlayers;\r\n    this.setState({ filteredPlayerList: loaded(filteredPlayers) })\r\n  }\r\n\r\n  getLoadingOptions = (): TableLoadingOption[] => {\r\n    if (this.props.state.playerList.type === \"loading\") {\r\n      return [TableLoadingOption.CELLS];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  sortColumn = (comparator: (a: any, b: any) => number) => {\r\n    const players = this.state.filteredPlayerList;\r\n    if (players.type !== \"loaded\") {\r\n      return;\r\n    }\r\n    const sortedIndex = Utils.times(players.value.length, (i: number) => i);\r\n    sortedIndex.sort((a: number, b: number) => {\r\n      return comparator(players.value[a], players.value[b]);\r\n    });\r\n    this.setState({ sortedPlayerIndex: sortedIndex });\r\n  }\r\n\r\n  private getCellData = (rowIndex: number, stat: (keyof IPlayer)[]) => {\r\n    const { filteredPlayerList, sortedPlayerIndex} = this.state;\r\n    if (filteredPlayerList.type !== \"loaded\") {\r\n      return undefined;\r\n    }\r\n    const sortedRowIndex = sortedPlayerIndex[rowIndex];\r\n    if (sortedRowIndex != null) {\r\n        rowIndex = sortedRowIndex;\r\n    }\r\n    return stat.map(s => { return prop(filteredPlayerList.value[rowIndex], s) })\r\n        .reduce((a, b) => [a, b].join(\" \"));\r\n  };\r\n  \r\n  render() {\r\n    const { playerList, playerTypeList, teamList } = this.props.state;\r\n    const { columns } = this.state;\r\n    const PlayerTypeSuggest = Suggest.ofType<IPlayerType>();\r\n    const TeamSuggest = Suggest.ofType<ITeam>();\r\n    const columnsList = playerList.type === \"loading\"\r\n      ? []\r\n      : columns.map(col => col.getColumn(this.getCellData, this.sortColumn));\r\n    return (\r\n      <div className='body-container'> \r\n        <div className='tab-title'>\r\n          <Icon icon={'predictive-analysis'} iconSize={20} />\r\n          <H3 className='bp3-heading'>Performance Analysis</H3>\r\n        </div> \r\n        <div>\r\n          <div className='dropdown-container'>\r\n            <PlayerTypeSuggest\r\n              className={playerTypeList.type === 'loading' ? 'bp3-skeleton' : 'dropdown'}\r\n              itemPredicate={filterPlayerType}\r\n              inputValueRenderer={renderPlayerTypeInputValue}\r\n              onItemSelect={(playerType: IPlayerType) => { this.filterPlayersByType(playerType) }}\r\n              items={playerTypeList.type === 'loaded' ? playerTypeList.value : []}\r\n              itemRenderer={renderPlayerType}\r\n              noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n            />\r\n            <TeamSuggest\r\n              className={teamList.type === 'loading' ? 'bp3-skeleton' : 'dropdown'}\r\n              itemPredicate={filterTeam}\r\n              inputValueRenderer={renderTeamInputValue}\r\n              onItemSelect={(team: ITeam) => { this.filterPlayersByTeam(team) }}\r\n              items={teamList.type === 'loaded' ? teamList.value : []}\r\n              itemRenderer={renderTeam}\r\n              noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Table\r\n              numRows={this.state.filteredPlayerList.type === \"loading\" ? 0 : this.state.filteredPlayerList.value.length > 20 ? 20 : this.state.filteredPlayerList.value.length}\r\n              enableColumnReordering={true}\r\n              numFrozenColumns={1}\r\n              loadingOptions={this.getLoadingOptions()}>\r\n              {columnsList}\r\n            </Table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (globalState: IGlobalReducer) => {\r\n  return {\r\n    state: globalState,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(PerformanceAnalysis)\r\n","import './PlayerAnalysis.scss';\r\n\r\nimport { Card, Elevation, H3, Icon, MenuItem } from '@blueprintjs/core';\r\nimport { Suggest } from '@blueprintjs/select';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IPlayer, ITeam } from '../index.d';\r\nimport { IGlobalReducer } from '../reducers/GlobalReducers';\r\nimport { loaded, loading, LoadState } from '../utils/LoadState';\r\nimport {\r\n  filterPlayer,\r\n  filterTeam,\r\n  renderPlayer,\r\n  renderPlayerInputValue,\r\n  renderTeam,\r\n  renderTeamInputValue,\r\n} from '../utils/PlayerAnalysis';\r\n\r\nexport interface IPlayerAnalysisProps {\r\n  state: IGlobalReducer,\r\n}\r\n \r\nexport interface IPlayerAnalysisState { \r\n  filteredPlayerList: LoadState<IPlayer[]>;\r\n  selectedPlayer?: IPlayer;\r\n }\r\n\r\nexport class PlayerAnalysis extends React.PureComponent<IPlayerAnalysisProps, IPlayerAnalysisState> {\r\n  constructor(props: IPlayerAnalysisProps) {\r\n    super(props)\r\n    this.state = {\r\n      filteredPlayerList: loading(),\r\n    }\r\n  }\r\n\r\n  filterPlayers(team: ITeam) {\r\n    this.setState({ filteredPlayerList: loading() });\r\n    let filteredPlayers: IPlayer[] = this.props.state.playerList.type === 'loaded' ? this.props.state.playerList.value : [];\r\n    filteredPlayers = filteredPlayers.filter((player: IPlayer) => player.team === team.id);\r\n    this.setState({ filteredPlayerList: loaded(filteredPlayers) })\r\n  }\r\n\r\n  handleSelectPlayer(player: IPlayer) {\r\n    this.setState({\r\n      selectedPlayer: player\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { teamList, playerList } = this.props.state;\r\n    const PlayerSuggest = Suggest.ofType<IPlayer>();\r\n    const TeamSuggest = Suggest.ofType<ITeam>();\r\n    const statsToShow: any[][] = [\r\n      ['Goals Scored (Assists)', this.state.selectedPlayer?.goals_scored, this.state.selectedPlayer?.assists],\r\n      ['Creativity (Rank)', this.state.selectedPlayer?.creativity, this.state.selectedPlayer?.creativity_rank],\r\n      ['Influence (Rank)', this.state.selectedPlayer?.influence, this.state.selectedPlayer?.influence_rank],\r\n      ['Threat (Rank)', this.state.selectedPlayer?.threat, this.state.selectedPlayer?.threat_rank],\r\n      ['Chance of Playing (next)', this.state.selectedPlayer?.chance_of_playing_this_round, this.state.selectedPlayer?.chance_of_playing_next_round],\r\n    ]\r\n    return (\r\n      <div className='body-container'>\r\n        <div className='tab-title'>\r\n          <Icon icon={'person'} iconSize={20} />\r\n          <H3 className='bp3-heading'>Player Analysis</H3>\r\n        </div>\r\n        <div>\r\n          <div className='dropdown-container'>\r\n            <TeamSuggest\r\n              className={teamList.type === 'loading' ? 'bp3-skeleton' : 'dropdown'}\r\n              itemPredicate={filterTeam}\r\n              inputValueRenderer={renderTeamInputValue}\r\n              onItemSelect={(team: ITeam) => { this.filterPlayers(team)}}\r\n              items={teamList.type === 'loaded' ? teamList.value : []}\r\n              itemRenderer={renderTeam}\r\n              noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n            />\r\n            <PlayerSuggest\r\n              className={playerList.type === 'loading' ? 'bp3-skeleton' : 'dropdown'}\r\n              itemPredicate={filterPlayer}\r\n              inputValueRenderer={renderPlayerInputValue}\r\n              onItemSelect={(player: IPlayer) => { this.handleSelectPlayer(player) }}\r\n              items={this.state.filteredPlayerList.type === 'loaded' ? this.state.filteredPlayerList.value : []}\r\n              itemRenderer={renderPlayer}\r\n              noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n            />\r\n          </div>\r\n          <div className='stats-container'>\r\n            {statsToShow.map((stat) => {\r\n              return (this.state.selectedPlayer !== undefined) && ((stat[1] !== null) || (stat[2] !== null)) &&\r\n              <Card className='stats-card' interactive={false} elevation={Elevation.THREE}>\r\n                <h3>{stat[0]}</h3>\r\n                <p>{stat[1] + ' (' + stat[2] + ')'}</p>\r\n              </Card>\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (globalState: IGlobalReducer) => {\r\n  return {\r\n    state: globalState,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(PlayerAnalysis);","import './App.scss';\n\nimport { Alignment, Navbar, Tab, TabId, Tabs } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { getPlayerList, getPlayerTypeList, getTeamList } from './actions/GlobalActions';\nimport PerformanceAnalysis from './components/PerformanceAnalysis';\nimport PlayerAnalysis from './components/PlayerAnalysis';\nimport { IStringElementMap } from './index.d';\nimport { IGlobalReducer } from './reducers/GlobalReducers';\n\nexport interface IAppState {\n  activePanelOnly: boolean;\n  animate: boolean;\n  navbarTabId: TabId;\n  vertical: boolean;\n}\n\nexport interface IAppProps {\n  getPlayerList: typeof getPlayerList,\n  getPlayerTypeList: typeof getPlayerTypeList,\n  getTeamList: typeof getTeamList,\n }\n\nexport class App extends React.PureComponent<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props) \n    this.state = {\n      activePanelOnly: true,\n      animate: true,\n      navbarTabId: \"playerAnalysis\",\n      vertical: false,\n    };\n  }\n\n  componentWillMount() {\n    const { getPlayerList, getPlayerTypeList, getTeamList} = this.props;\n    getPlayerList(\"http://localhost:8000/players/all\");\n    getPlayerTypeList(\"http://localhost:8000/players/types\");\n    getTeamList(\"http://localhost:8000/teams/all\");\n  }\n\n  private tabIdToComponentMap: IStringElementMap = {\n    \"playerAnalysis\": <PlayerAnalysis />,\n    \"PerformanceAnalysis\": <PerformanceAnalysis />\n  }\n\n  private handleNavbarTabChange = (navbarTabId: TabId) => this.setState({ navbarTabId });\n\n  private displayActiveTab = (tabId: string) => this.tabIdToComponentMap[tabId];\n\n  public render() {\n    return (\n      <div className=\"bp3-dark\">\n        <Navbar>\n          <Navbar.Group>\n              <Navbar.Heading className='app-header'>\n                  Fantasy Premier League Analytics\n              </Navbar.Heading>\n          </Navbar.Group>\n          <Navbar.Group align={Alignment.RIGHT}>\n            <Tabs\n              animate={this.state.animate}\n              renderActiveTabPanelOnly={this.state.activePanelOnly}\n              id=\"MainTabs\"\n              large={true}\n              onChange={this.handleNavbarTabChange}\n              selectedTabId={this.state.navbarTabId}\n              vertical={false}>\n              <Tab id=\"playerAnalysis\" title=\"Player Analysis\"/>\n              <Tab id=\"PerformanceAnalysis\" title=\"Performance Analysis\" />\n              <Tabs.Expander />\n            </Tabs>\n          </Navbar.Group>\n        </Navbar>\n        <div className='main-container'>\n          {this.displayActiveTab(this.state.navbarTabId.toString())}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (globalState: IGlobalReducer) => {\n  return {\n    state: globalState,\n  };\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return bindActionCreators(\n    {\n      getPlayerList,\n      getPlayerTypeList,\n      getTeamList,\n    },\n    dispatch,\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { constants } from '../constants';\r\nimport { loaded, loading, LoadState } from '../utils/LoadState';\r\nimport { IPlayer, IPlayerType, ITeam } from './../index.d';\r\n\r\nexport interface IGlobalReducer {\r\n  playerList: LoadState<IPlayer[]>,\r\n  teamList: LoadState<ITeam[]>,\r\n  playerTypeList: LoadState<IPlayerType[]>,\r\n}\r\n\r\nexport interface IGlobalAction {\r\n  type: string,\r\n  payload: IPlayer[] | IPlayerType[] | ITeam[],\r\n}\r\n\r\nconst defaultState: IGlobalReducer = {\r\n  playerList: loading(),\r\n  playerTypeList: loading(),\r\n  teamList: loading(),\r\n}\r\n\r\nexport const GlobalReducer = (state = defaultState, action: IGlobalAction) => {\r\n\r\n  switch (action.type) {\r\n    case constants.loadPlayers:\r\n      return {\r\n        ...state,\r\n        playerList: loaded(action.payload),\r\n      }\r\n    case constants.loadPlayerTypes:\r\n      return {\r\n        ...state,\r\n        playerTypeList: loaded(action.payload),\r\n      }\r\n    case constants.loadTeams:\r\n      return {\r\n        ...state,\r\n        teamList: loaded(action.payload),\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport { GlobalReducer, IGlobalReducer } from './GlobalReducers';\r\n\r\nexport interface ICombinedReducers {\r\n  GlobalReducer: IGlobalReducer;\r\n}\r\n\r\nexport default combineReducers({\r\n  GlobalReducer,\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './App';\nimport Reducers from './reducers/Reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(Reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}